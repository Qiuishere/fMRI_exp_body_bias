function randlist = randSamp(varset,num,type)%% randlist = randSamp(varset,num,type);%% Returns a randomized list of num elements sampled from varset.% Types are: 'r' for independent random samples with replacement, % 	'n' for random samples without replacement / %		(a new sampling is started after the set is exhausted). % 	'e' for with replacement, but constrained to have equal numbers of each item%   'o' for in order(not random) again a new sampling is started after the set is exhausted% 8/1/97 sae created it% 'n' is the restricted random: rand every subsession.[312 123 ...]% 'e' is random 1:9, randmize all sessions. % 'o' is no randomize.% -DB 20140907% varset  = 1:3;% num = 9;% type = 'e';if(size(varset,1) == 1)	varset = varset';endrandlist = zeros(num,size(varset,2));setsize = size(varset,1);if type == 'n'		%No replacement, start over when set depleted	nlists = ceil(num/setsize);	for i = 1:nlists		ind = [((i-1)*(setsize)+1):(i*setsize)];		[srt ord] = sort(rand(1,setsize)); % bm:sometimes, this equals the use of ord=randi(setsize,[1,setsize]);		randlist(ind,:) = varset(ord,:);	end	randlist = randlist(1:num,:);elseif type == 'e'	%Equal total numbers	nlists = ceil(num/setsize);	for i = 1:nlists		ind = [((i-1)*(setsize)+1):(i*setsize)];		randlist(ind,:) = varset; % we could use this by repmat.-db 20140907	end	randlist = randlist(1:num,:); %bm:if num=24,setsize=10,then nlists=3,so after doing this, randlist take 1:num from the old randlist	[srt ord] = sort(rand(1,num));% we could also use 'randperm'	randlist = randlist(ord,:);elseif type == 'o'		%In order, start over when set depleted, csf	nlists = ceil(num/setsize);	for i = 1:nlists		ind = [((i-1)*(setsize)+1):(i*setsize)];		randlist(ind,:) = varset(:,:);	end	randlist = randlist(1:num,:);else				%Random	randlist = varset(ceil(rand(1,num)*setsize),:);end